datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DisciplineName {
  MATHEMATIQUES
  ARTS_PLASTIQUES
  FRANCAIS
  ANGLAIS
  PHYSIQUE
  MUSIQUE
  HISTOIRE
  TECHNOLOGIE
  CHIMIE
  EDUCATION_CIVIQUE
  PHILOSOPHIE
  BIOLOGIE
}
model Discipline {
  id    String               @id @default(cuid())
  name  DisciplineName
  UserHasDiscipline UserHasDisciplines[]
}
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  status     UserStatus @default(CONNECTED)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  profil Profile? 
  refreshToken String?
  messages Message[]
  userHasDisciplines UserHasDisciplines[] 
  userHasSchool UserHasSchool[] 
  children Children[]
  roles RoleHasUser[]
  events Event[]
}
model Profile {
  id         String   @id @default(cuid())
  lastname   String
  firstname  String
  photo      String
  address_id String
  userId String @unique 
  user       User     @relation( fields: [userId], references: [id])
  address    Address  @relation(fields: [address_id], references: [id])
}

model UserHasDisciplines {
  user_id       String
  discipline_id String

  user       User       @relation(fields: [user_id], references: [id])
  discipline Discipline @relation(fields: [discipline_id], references: [id])

  @@id([user_id, discipline_id])
}

model ProfilAttendanceEvent {
  event_id    String
  status      String  // @dev ENUM 
  children_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  event    Event    @relation(fields: [event_id], references: [id])
  children Children @relation(fields: [children_id], references: [id])

  @@id([event_id, children_id])

}

model Message {
  id          String   @id @default(cuid())
  content     String
  user_id     String
  event_id    String
  message_type String  // ENUM placeholder, replace with specific values if needed
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  user  User  @relation(fields: [user_id], references: [id])
  event Event @relation(fields: [event_id], references: [id])

  @@index([user_id, event_id], name: "message_user_id_event_id_index")
}

model UserHasSchool {
  school_id String
  user_id   String

  user   User   @relation(fields: [user_id], references: [id])
  school School @relation(fields: [school_id], references: [id])

  @@id([school_id, user_id])
}

model School {
  id         String   @id @default(cuid())
  name       String
  address    Address? @relation(fields: [address_id], references: [id], onDelete: SetNull)
  address_id String?  @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  children Children[]
  userHasSchool UserHasSchool[]

  @@index([address_id], name: "school_address_id_index")
}

model EventHasEventTag {
  event_tag_id String
  event_id     String

  eventTag EventTag @relation(fields: [event_tag_id], references: [id])
  event    Event    @relation(fields: [event_id], references: [id])

  @@id([event_tag_id, event_id])
  @@index([event_id, event_tag_id], name: "event_has_event_tag_event_id_event_tag_id_index")
}

model Address {
  id           String   @id @default(cuid())
  address_line String
  zip_code     String
  city         String
  location     Json
  school     School?
  school_id  String?  @unique
  profil Profile[]
  event  Event[] 
}

// Example JSON format for location
// {
//   "type": "GEOLOC",
//   "lat": 0,
//   "long": 0
// }

model RoleHasUser {
  role_id String
  user_id String

  role Role @relation(fields: [role_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@id([role_id, user_id])
}

enum RoleName {
  PARENT
  PARENT_TEACHER
  SCHOOL
}

model Role {
  id   String @id @default(cuid())
  name RoleName 

  roleHasUser RoleHasUser[] //@dev one to one
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  start_date  DateTime
  end_date    DateTime
  photo       String?
  guest_limit Int
  is_public   Boolean
  category    String  // @enum
  address_id  String
  user_id     String
  status      String  // @enum
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  address Address @relation(fields: [address_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])
  messages Message[]
  eventTags EventHasEventTag[]
  attendances ProfilAttendanceEvent[]
}

enum UserStatus {
  CONNECTED
  DISCONNECTED
  SUSPENDED
}
enum EventTagName {
  CAGNOTTE
  SPORT
  PARC
  SORTIE
  FETE
  MUSIQUE
  ASSOCIATION
  COURS
  SONDAGE
  COVOITURAGE
  MUSEE
  DEVOIR
  FOOT
}

model EventTag {
  id   String        @id @default(cuid())
  tag  EventTagName
  eventTags EventHasEventTag[]
}

model Children {
  id         String   @id @default(cuid())
  name       String
  birthday   DateTime
  class      String
  user_id    String
  school_id  String
  created_at DateTime
  updated_at DateTime

  user    User    @relation(fields: [user_id], references: [id])
  school  School  @relation(fields: [school_id], references: [id])
  attendances ProfilAttendanceEvent[]

  @@index([user_id, school_id], name: "children_user_id_school_id_index")
}
